
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Post {
  id        Int     @default(autoincrement()) @id
  title     String?
  subCategories String[]
  category String?
  slug      String?
  content   String?
  template   String?
  tags      String[]
  image     String?
  createdAt     DateTime  @default(now()) 
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
 
}



model Movie {
  id        Int     @default(autoincrement()) @id
  title     String?
  categories String[]
  slug      String?
  media   String?
  poster   String?
  time   String?  
  createdAt     DateTime  @default(now()) 
  status Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
 
}

model Product {
  id       Int     @default(autoincrement()) @id
  name     String?
  slug String?
  images    String[]
  description String?
  category    String?
  subCategories   String[]
  size  String?
  weight  Decimal?  
  price    Decimal 
  sellingPrice Decimal
  discount Decimal?
  gst Decimal?
  minimumQuantity Int?
  usage String?
  inStock Boolean @default(true) 
}



model Orders {
  id        Int     @default(autoincrement()) @id
  OrderNumber     String?  @unique
  Name        String
  Email       String
  Contact String?
  Address   String[]
  TotalProducts Int
  Amount Decimal
  Tax Decimal?
  ShippingCharge  Decimal ?
  TotalAmount Decimal
  ProductDetails Json?
  PaymentID String?
  PaymentStatus String ?
  OrderStatus String ?
  createdAt     DateTime  @default(now()) 
  customer    User?   @relation(fields: [cusId], references: [id])
  cusId  Int?
  
 
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  movies        Movie[]
  Orders        Orders[]
 

  @@map(name: "users")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])

  
}
